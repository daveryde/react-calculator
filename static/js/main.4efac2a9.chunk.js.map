{"version":3,"sources":["components/CalculatorScreen.jsx","actions/operations.js","components/CalculatorInternal.jsx","components/Calculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["Screen","styled","div","CalculatorScreen","value","initialState","input","memory","operation","clickAllClear","clickPercentage","previousState","String","parseFloat","clickSquared","clickInverse","inverse","Math","sign","abs","calculate","firstNumber","secondNumber","Error","clickEqual","operationKeys","buttonColors","CalculatorBody","Button","button","attrs","props","bgColor","BigButton","CalculatorInternal","entry","handleNumberClick","handleClearAll","handleOperation","handlePercentage","handleSquared","handleInverse","handleEqual","onClick","e","target","CalculatorWrapper","Calculator","useState","setEntry","number","newInput","clickNumber","result","clickOperation","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4efac2a9.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Screen = styled.div`\r\n    color: #fff;\r\n    font-size: 50px;\r\n    grid-column-end: span 4;\r\n    margin: 50px 0 10px;\r\n    overflow: hidden;\r\n    padding: 10px;\r\n    text-align: right;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n`;\r\n\r\nconst CalculatorScreen = ({ value }) => (\r\n    <Screen>\r\n        {value}\r\n    </Screen>\r\n);\r\n\r\nexport default CalculatorScreen;","export const initialState = {\r\n    input: '0',\r\n    memory: '0',\r\n    operation: null,\r\n}\r\n\r\nexport const clickAllClear = () => {\r\n    return { ...initialState };\r\n}\r\n\r\nexport const clickNumber = (number, previousState) => {\r\n    const { input, memory, operation } = previousState;\r\n    let newInput;\r\n\r\n    if (number === '.') {\r\n        newInput = input + number;\r\n    }\r\n    else if (operation == null || input !== memory) {\r\n        newInput = String(parseFloat(input + number));\r\n    }\r\n    else {\r\n        newInput = number;\r\n    }\r\n\r\n    return {\r\n        ...previousState,\r\n        input: newInput,\r\n    };\r\n}\r\n\r\nexport const clickOperation = (operation, previousState) => {\r\n    if (parseFloat(previousState.memory) > 0) {\r\n        const result = calculate(previousState);\r\n\r\n        return {\r\n            input: initialState.input,\r\n            memory: result,\r\n            operation\r\n        }\r\n    }\r\n\r\n    return {\r\n        input: \"\",\r\n        memory: previousState.input,\r\n        operation,\r\n    };\r\n}\r\n\r\nexport const clickPercentage = (previousState) => {\r\n    const result = String(parseFloat(previousState.input) / 100);\r\n\r\n    return {\r\n        input: result,\r\n        memory: initialState.memory,\r\n        operation: initialState.operation,\r\n    };\r\n}\r\n\r\nexport const clickSquared = (previousState) => {\r\n    const result = String(parseFloat(previousState.input) * parseFloat(previousState.input));\r\n\r\n    return {\r\n        input: result,\r\n        memory: initialState.memory,\r\n        operation: initialState.operation,\r\n    };\r\n}\r\n\r\nexport const clickInverse = (previousState) => {\r\n    const { input } = previousState;\r\n    const inverse = Math.sign(input) ? -Math.abs(input) : Math.abs(input);\r\n    \r\n    return {\r\n        ...previousState,\r\n        input: inverse\r\n    };\r\n}\r\n\r\nconst calculate = (previousState) => {\r\n    const { input, memory, operation } = previousState;\r\n\r\n    const firstNumber = parseFloat(memory);\r\n    const secondNumber = parseFloat(input);\r\n\r\n    switch (operation) {\r\n        case '+':\r\n            return String(firstNumber + secondNumber);\r\n        case '-':\r\n            return String(firstNumber - secondNumber);\r\n        case 'x':\r\n            return String(firstNumber * secondNumber);\r\n        case '/':\r\n            return String(firstNumber / secondNumber);\r\n        default:\r\n            throw new Error('Operation not allowed');\r\n    }\r\n}\r\n\r\nexport const clickEqual = (previousState) => {\r\n    const { input, memory } = previousState;\r\n\r\n    if (input === initialState.input || memory === initialState.memory) {\r\n        return {\r\n            ...previousState\r\n        }\r\n    }\r\n\r\n    const result = calculate(previousState);\r\n\r\n    return {\r\n        input: result,\r\n        memory: initialState.memory,\r\n        operation: initialState.operation,\r\n    };\r\n}\r\n\r\nexport const operationKeys = {\r\n    C: \"C\",\r\n    PERCENT: \"%\",\r\n    SQUARE: \"^\",\r\n    MULTIPLY: \"x\",\r\n    DIVIDE: \"/\",\r\n    ADD: \"+\",\r\n    SUBTRACT: \"-\",\r\n    DECIMAL: \".\",\r\n    EQUAL: \"=\",\r\n    ONE: \"1\",\r\n    TWO: \"2\",\r\n    THREE: \"3\",\r\n    FOUR: \"4\",\r\n    FIVE: \"5\",\r\n    SIX: \"6\",\r\n    SEVEN: \"7\",\r\n    EIGHT: \"8\",\r\n    NINE: \"9\",\r\n    ZERO: \"0\",\r\n    INVERSE: \"-/+\"\r\n}","import CalculatorScreen from './CalculatorScreen';\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { operationKeys } from '../actions/operations';\r\n\r\nconst buttonColors = {\r\n    white: \"#fff\",\r\n    orange: \"#fd7d2c\",\r\n    deeppink: \"#fc2c7a\",\r\n    crimson: \"#fa2752\",\r\n}\r\n\r\nconst CalculatorBody = styled.div`\r\n    display: grid;\r\n    grid-gap: 10px;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: auto;\r\n`;\r\n\r\nconst Button = styled.button.attrs(props => ({\r\n    bgColor: props.bgColor\r\n}))`\r\n    background-color: ${props => props.bgColor ? props.bgColor : \"transparent\"};\r\n    color: ${props => props.bgColor === buttonColors.white ? \"red\" : \"white\"};\r\n    border-style: none;\r\n    border-radius: 50%;\r\n    font-size: 20px;\r\n    padding: 12px;\r\n\r\n    &:active {\r\n        transform: translateY(2px);\r\n        box-shadow: ${props => `0 0 40px 10px ${props.bgColor ? props.bgColor : '#fc2c7a'}`};\r\n    }\r\n`;\r\n\r\nconst BigButton = styled.button`\r\n    grid-area: 6 / 5 / 8 / 4;\r\n    background: linear-gradient(to bottom, ${buttonColors.deeppink}, ${buttonColors.crimson});\r\n    border-style: none;\r\n    border-radius: 25px;\r\n    font-size: 20px;\r\n    padding: 12px;\r\n\r\n    &:active {\r\n        transform: translateY(4px);\r\n        box-shadow: 0 0 40px 10px ${buttonColors.deeppink};\r\n    }\r\n`;\r\n\r\nconst CalculatorInternal = ({\r\n    entry,\r\n    handleNumberClick,\r\n    handleClearAll,\r\n    handleOperation,\r\n    handlePercentage,\r\n    handleSquared,\r\n    handleInverse,\r\n    handleEqual\r\n}) => (\r\n    <CalculatorBody>\r\n        <CalculatorScreen value={`${entry.memory !== \"0\" ? entry.memory : \"\"} ${entry.operation !== null ? entry.operation : \"\"} ${entry.input === \"\" ? \"0\" : entry.input} `} />\r\n        <Button\r\n            bgColor={buttonColors.white}\r\n            value={operationKeys.C}\r\n            onClick={handleClearAll}>\r\n            {operationKeys.C}\r\n        </Button>\r\n        <Button\r\n            bgColor={buttonColors.orange}\r\n            value={operationKeys.PERCENT}\r\n            onClick={handlePercentage}>\r\n            {operationKeys.PERCENT}\r\n        </Button>\r\n        <Button\r\n            bgColor={buttonColors.orange}\r\n            value={operationKeys.SQUARE}\r\n            onClick={handleSquared}>\r\n            {operationKeys.SQUARE}\r\n        </Button>\r\n        <Button\r\n            bgColor={buttonColors.orange}\r\n            value={operationKeys.DIVIDE}\r\n            onClick={(e) => handleOperation(e.target.value)}>\r\n            {operationKeys.DIVIDE}\r\n        </Button>\r\n        <Button bgColor={buttonColors.orange} />\r\n        <Button bgColor={buttonColors.orange} />\r\n        <Button bgColor={buttonColors.orange} />\r\n        <Button\r\n            bgColor={buttonColors.orange}\r\n            value={operationKeys.MULTIPLY}\r\n            onClick={(e) => handleOperation(e.target.value)}>\r\n            {operationKeys.MULTIPLY}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.ONE}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.ONE}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.TWO}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.TWO}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.THREE}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.THREE}\r\n        </Button>\r\n        <Button\r\n            bgColor={buttonColors.orange}\r\n            value={operationKeys.SUBTRACT}\r\n            onClick={(e) => handleOperation(e.target.value)}>\r\n            {operationKeys.SUBTRACT}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.FOUR}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.FOUR}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.FIVE}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.FIVE}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.SIX}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.SIX}\r\n        </Button>\r\n        <Button\r\n            bgColor={buttonColors.orange}\r\n            value={operationKeys.ADD}\r\n            onClick={(e) => handleOperation(e.target.value)}>\r\n            {operationKeys.ADD}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.SEVEN}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.SEVEN}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.EIGHT}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.EIGHT}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.NINE}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.NINE}\r\n        </Button>\r\n\r\n        <BigButton\r\n            value={operationKeys.EQUAL}\r\n            onClick={handleEqual}>\r\n            {operationKeys.EQUAL}\r\n        </BigButton>\r\n\r\n        <Button\r\n            value={operationKeys.INVERSE}\r\n            onClick={() => handleInverse()}\r\n        >\r\n            {operationKeys.INVERSE}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.DECIMAL}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.DECIMAL}\r\n        </Button>\r\n        <Button\r\n            value={operationKeys.ZERO}\r\n            onClick={(e) => handleNumberClick(e.target.value)}>\r\n            {operationKeys.ZERO}\r\n        </Button>\r\n    </CalculatorBody>\r\n);\r\n\r\nexport default CalculatorInternal;","import React, { useState } from 'react';\r\n\r\nimport CalculatorInternal from './CalculatorInternal';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n    clickAllClear,\r\n    clickEqual,\r\n    clickInverse,\r\n    clickNumber,\r\n    clickOperation,\r\n    clickPercentage,\r\n    clickSquared,\r\n    initialState\r\n} from '../actions/operations';\r\n\r\nconst CalculatorWrapper = styled.div`\r\n    width: 230px;\r\n    height: auto;\r\n    background: linear-gradient(to right, #171a58, #454c7d);\r\n    border-color: #d3d3d3;\r\n    border-radius: 20px;\r\n    border-style: none;\r\n    color: white;\r\n    display: inline-block;\r\n    margin: 60px auto;\r\n    padding: 20px;\r\n`;\r\n\r\nconst Calculator = () => {\r\n    const [entry, setEntry] = useState(initialState);\r\n\r\n    const handleNumberClick = (value) => {\r\n        setEntry(clickNumber(value, entry));\r\n    }\r\n\r\n    const handleClearAll = () => {\r\n        setEntry(clickAllClear);\r\n    }\r\n\r\n    const handleOperation = (operation) => {\r\n        setEntry(clickOperation(operation, entry));\r\n    }\r\n\r\n    const handlePercentage = () => {\r\n        setEntry(clickPercentage);\r\n    }\r\n\r\n    const handleSquared = () => {\r\n        setEntry(clickSquared);\r\n    }\r\n\r\n    const handleInverse = () => {\r\n        setEntry(clickInverse, entry);\r\n    }\r\n\r\n    const handleEqual = () => {\r\n        setEntry(clickEqual);\r\n    }\r\n\r\n    return (\r\n        <CalculatorWrapper>\r\n            <CalculatorInternal\r\n                entry={entry}\r\n                handleNumberClick={handleNumberClick}\r\n                handleClearAll={handleClearAll}\r\n                handleOperation={handleOperation}\r\n                handlePercentage={handlePercentage}\r\n                handleSquared={handleSquared}\r\n                handleInverse={handleInverse}\r\n                handleEqual={handleEqual}\r\n            />\r\n        </CalculatorWrapper>\r\n    )\r\n}\r\n\r\nexport default Calculator;\r\n","import Calculator from './components/Calculator';\n\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  display: flex;\n  width: 100vw;\n  height: 100vh;\n  justify-content: center;\n  align-items: center;\n  background: repeating-linear-gradient(135deg, \n                rgb(251,140,99, 0) 15%, \n                rgb(251,140,99, .2) 35%, \n                rgb(253,90,98, .5) 75%),\n              repeating-linear-gradient(315deg, \n                rgb(219,81,93, .5) 15%, \n                rgb(252,44,122, .7) 35%, \n                rgb(252,44,122, .9) 55%, \n                rgb(253,90,98) 75%);\n`;\n\nfunction App() {\n  return (\n    <AppContainer>\n      <Calculator />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}